<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://906bc906.github.io/quartz/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>ko-KR</language><lastBuildDate>Mon, 10 Oct 2022 01:16:28 +0900</lastBuildDate><atom:link href="https://906bc906.github.io/quartz/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://906bc906.github.io/quartz/note/%EB%AA%A8%EB%93%A0-%EB%85%B8%ED%8A%B8-All-notes/</link><pubDate>Mon, 10 Oct 2022 01:16:28 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%EB%AA%A8%EB%93%A0-%EB%85%B8%ED%8A%B8-All-notes/</guid><description>모든 노트 All notes 1 2 TABLE WITHOUT ID file.link as &amp;#34;Recently Modified&amp;#34;, choice(none(tag),&amp;#34;_&amp;#34;,join(tag)) as tag SORT file.mtime desc</description></item><item><title>Recently Modified</title><link>https://906bc906.github.io/quartz/note/Recently-Modified/</link><pubDate>Mon, 10 Oct 2022 01:16:16 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/Recently-Modified/</guid><description>1 2 3 TABLE WITHOUT ID file.link as &amp;#34;Recently Modified&amp;#34;, choice(none(tag),&amp;#34;_&amp;#34;,join(tag)) as tag SORT file.mtime desc LIMIT 10</description></item><item><title>Orphan notes</title><link>https://906bc906.github.io/quartz/note/Orphan-notes/</link><pubDate>Mon, 10 Oct 2022 01:13:57 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/Orphan-notes/</guid><description>1 list from &amp;#34;&amp;#34; where length(file.inlinks) =0 and length(file.outlinks) = 0 1 list from &amp;#34;&amp;#34; where length(file.</description></item><item><title>Vite</title><link>https://906bc906.github.io/quartz/note/Vite/</link><pubDate>Mon, 10 Oct 2022 01:08:20 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/Vite/</guid><description>웹팩보다 빠른 프론트엔드 도구.
개발 환경에서는 esbuild를 이용, 배포 환경에서는 rollup을 이용.
대부분의 모던 브라우저가 ESM을 지원한다는 전제 하에 ESM의 장점을 활용함.</description></item><item><title>Typescript</title><link>https://906bc906.github.io/quartz/note/Typescript/</link><pubDate>Mon, 10 Oct 2022 01:07:51 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/Typescript/</guid><description>TARGET DECK 전체::개발::typescript
https://www.typescriptlang.org/
자바스크립트로 빌드하는 강타입 언어.
설치 및 실행 일반적으로는, 타입스크립트 ts 파일을 자바스크립트 파일로 컴파일하고 그것을 실행하는 방식으로 진행한다.</description></item><item><title>SolidJS - Reactivity - Suspense</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Suspense/</link><pubDate>Mon, 10 Oct 2022 00:58:13 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Suspense/</guid><description>https://www.solidjs.com/tutorial/async_suspense
lazy와 createResource를 단독으로 사용할 수 있지만, Solid는 여러 비동기 이벤트 표시를 조정하는 메커니즘도 제공한다, Suspense는 이러한 비동기 이벤트가 완료될 때까지 일부 로드된 컨텐츠 대신 fallback 플레이스홀더를 표시할 수 있는 경계 역할을 한다.</description></item><item><title>Obsidian 을 Github Pages로 호스팅하기</title><link>https://906bc906.github.io/quartz/note/Obsidian-%EC%9D%84-Github-Pages%EB%A1%9C-%ED%98%B8%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0/</link><pubDate>Mon, 10 Oct 2022 00:57:20 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/Obsidian-%EC%9D%84-Github-Pages%EB%A1%9C-%ED%98%B8%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0/</guid><description>선요약
Obsidian 자체적인 Publish가 제일 안정적으로 퍼블리싱 되지만 가격이 비싸다 서드 파티 Publish 들은 아직 불안정한 부분이 많음 (2022년 10월 6일 기준) 그나마 현시점에서 가장 채택할만한 서드 파티 Publish는 Quartz이지만, 주요 기능들이 4.</description></item><item><title>obsidian 옵시디언</title><link>https://906bc906.github.io/quartz/note/obsidian-%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8/</link><pubDate>Mon, 10 Oct 2022 00:55:09 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/obsidian-%EC%98%B5%EC%8B%9C%EB%94%94%EC%96%B8/</guid><description> Obsidian 을 Github Pages로 호스팅하기</description></item><item><title>oauth</title><link>https://906bc906.github.io/quartz/note/oauth/</link><pubDate>Mon, 10 Oct 2022 00:54:27 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/oauth/</guid><description>Open Authorization
RFC 6749: The OAuth 2.0 Authorization Framework
개요 OAuth 사용 이전, 사용자들은 기본적으로 아이디와 비밀번호를 이용하여 인증했다.</description></item><item><title>ubuntu smb mount</title><link>https://906bc906.github.io/quartz/note/ubuntu-smb-mount/</link><pubDate>Mon, 10 Oct 2022 00:53:55 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/ubuntu-smb-mount/</guid><description>1 sudo mount -t cifs -o user=SMB유저이름,vers=2.0,noperm,password=비밀번호 FTP주소 마운트할로컬경로 chmod - how do I mount a CIFS share so I can fully control the mounted volume on the client - Unix &amp;amp; Linux Stack Exchange</description></item><item><title>linux git pat 등록</title><link>https://906bc906.github.io/quartz/note/linux-git-pat-%EB%93%B1%EB%A1%9D/</link><pubDate>Mon, 10 Oct 2022 00:52:55 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/linux-git-pat-%EB%93%B1%EB%A1%9D/</guid><description>왜 1 support for password authentication was removed private repo를 clone하다 보면 위와 같은 오류가 발생한다.
패스워드 인증을 제거하면서 생긴 일인데, 깃헙에서는 대안으로 PAT 를 제공한다.</description></item><item><title>passport로 github oauth 회원가입 및 로그인 구현</title><link>https://906bc906.github.io/quartz/note/passport%EB%A1%9C-github-oauth-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/</link><pubDate>Mon, 10 Oct 2022 00:51:19 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/passport%EB%A1%9C-github-oauth-%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%EB%B0%8F-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/</guid><description>passport를 이용하여 github oauth를 하는 간단한 예시 https://www.youtube.com/watch?v=anZqM4JnZ3o</description></item><item><title>EdgeDB</title><link>https://906bc906.github.io/quartz/note/EdgeDB/</link><pubDate>Mon, 10 Oct 2022 00:50:18 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/EdgeDB/</guid><description>시작 CLI 설치 1 curl https://sh.edgedb.com --proto &amp;#39;=https&amp;#39; -sSf1 | sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 info: downloading installer Welcome to EdgeDB!</description></item><item><title>리눅스와 윈도우, SMB로 GIT 공유 시 겪는 문제</title><link>https://906bc906.github.io/quartz/note/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%99%80-%EC%9C%88%EB%8F%84%EC%9A%B0-SMB%EB%A1%9C-GIT-%EA%B3%B5%EC%9C%A0-%EC%8B%9C-%EA%B2%AA%EB%8A%94-%EB%AC%B8%EC%A0%9C/</link><pubDate>Mon, 10 Oct 2022 00:38:53 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%EB%A6%AC%EB%88%85%EC%8A%A4%EC%99%80-%EC%9C%88%EB%8F%84%EC%9A%B0-SMB%EB%A1%9C-GIT-%EA%B3%B5%EC%9C%A0-%EC%8B%9C-%EA%B2%AA%EB%8A%94-%EB%AC%B8%EC%A0%9C/</guid><description>컴퓨터는 윈도우, 노트북은 리눅스를 사용하고 있고, 간이NAS에 repo를 두고 OS를 번갈아가면서 쓰고 있는데 좀 많은 문제를 겪고 있다.
safe directory 오류 뜨는 거 그대로 허용해준다.</description></item><item><title>Jekyll 블로그를 Github Pages에 호스팅하기</title><link>https://906bc906.github.io/quartz/note/Jekyll-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-Github-Pages%EC%97%90-%ED%98%B8%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0/</link><pubDate>Mon, 10 Oct 2022 00:36:56 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/Jekyll-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-Github-Pages%EC%97%90-%ED%98%B8%EC%8A%A4%ED%8C%85%ED%95%98%EA%B8%B0/</guid><description>이 문서는 우분투 기준으로 작성되었음.
다른 OS의 경우 아래 링크 보고 하세요.
https://jekyllrb.com/docs/installation/
requirements https://jekyllrb.com/docs/installation/#requirements
Pop!_os 기준임.
Ruby 2.</description></item><item><title>블로그</title><link>https://906bc906.github.io/quartz/note/%EB%B8%94%EB%A1%9C%EA%B7%B8/</link><pubDate>Mon, 10 Oct 2022 00:36:49 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%EB%B8%94%EB%A1%9C%EA%B7%B8/</guid><description> 블로그를 만들기까지 Jekyll 블로그를 Github Pages에 호스팅하기</description></item><item><title>Github fork 와 template 의 차이</title><link>https://906bc906.github.io/quartz/note/Github-fork-%EC%99%80-template-%EC%9D%98-%EC%B0%A8%EC%9D%B4/</link><pubDate>Mon, 10 Oct 2022 00:34:46 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/Github-fork-%EC%99%80-template-%EC%9D%98-%EC%B0%A8%EC%9D%B4/</guid><description>https://stackoverflow.com/questions/62082123/github-what-is-the-difference-between-template-and-fork-concepts-and-when-to-us
fork는 원본 리포에 종속적이고, template은 아예 새로 만드는 기능인듯, (boilerplate 느낌)</description></item><item><title>github 깃헙</title><link>https://906bc906.github.io/quartz/note/github-%EA%B9%83%ED%97%99/</link><pubDate>Mon, 10 Oct 2022 00:34:42 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/github-%EA%B9%83%ED%97%99/</guid><description> Github fork 와 template 의 차이</description></item><item><title>특정 브랜치만 pull 하기</title><link>https://906bc906.github.io/quartz/note/%ED%8A%B9%EC%A0%95-%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%A7%8C-pull-%ED%95%98%EA%B8%B0/</link><pubDate>Mon, 10 Oct 2022 00:34:29 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%ED%8A%B9%EC%A0%95-%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%A7%8C-pull-%ED%95%98%EA%B8%B0/</guid><description>TARGET DECK 전체::개발::GIT
origin remote 로부터 specific branch 만 pull 하려면 어떻게 해야되는가?
git pull origin specific</description></item><item><title>git 깃</title><link>https://906bc906.github.io/quartz/note/git-%EA%B9%83/</link><pubDate>Mon, 10 Oct 2022 00:34:22 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/git-%EA%B9%83/</guid><description> 특정 브랜치만 pull 하기 리눅스와 윈도우, SMB로 GIT 공유 시 겪는 문제 linux git pat 등록</description></item><item><title>리눅스 디스플레이 색온도 조절</title><link>https://906bc906.github.io/quartz/note/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%94%8C%EB%A0%88%EC%9D%B4-%EC%83%89%EC%98%A8%EB%8F%84-%EC%A1%B0%EC%A0%88/</link><pubDate>Mon, 10 Oct 2022 00:33:28 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%94%8C%EB%A0%88%EC%9D%B4-%EC%83%89%EC%98%A8%EB%8F%84-%EC%A1%B0%EC%A0%88/</guid><description>scr 설치 sudo apt install sct
사용 sct [temperature] 1000 - 10000 사이에서 사용, 기본값은 6500
리셋 scr
gnome settings -&amp;gt; display -&amp;gt; night mode</description></item><item><title>리눅스 (OS 사용)</title><link>https://906bc906.github.io/quartz/note/%EB%A6%AC%EB%88%85%EC%8A%A4-OS-%EC%82%AC%EC%9A%A9/</link><pubDate>Mon, 10 Oct 2022 00:33:15 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%EB%A6%AC%EB%88%85%EC%8A%A4-OS-%EC%82%AC%EC%9A%A9/</guid><description> 리눅스 디스플레이 색온도 조절 linux git pat 등록 ubuntu smb mount</description></item><item><title>SolidJS - Router</title><link>https://906bc906.github.io/quartz/note/SolidJS-Router/</link><pubDate>Mon, 10 Oct 2022 00:32:30 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Router/</guid><description>https://github.com/solidjs/solid-router
라우터를 사용하면 브라우저의 URL에 따라 view를 변경할 수 있다. 이것은 &amp;ldquo;Single-page&amp;rdquo; application이 기존의 멀티 페이지 사이트를 흉내낼 수 있게 한다.</description></item><item><title>SolidJS - Router - Data functions</title><link>https://906bc906.github.io/quartz/note/SolidJS-Router-Data-functions/</link><pubDate>Mon, 10 Oct 2022 00:32:08 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Router-Data-functions/</guid><description>그간의 예시에서, 유저 컴포넌트가 lazy 로드된 뒤에, 데이터가 fetch 되었다. route data functions으로, route를 로딩하면서 동시에 data를 fetch할 수 있다.</description></item><item><title>SolidJS - Router - Dynamic Routes</title><link>https://906bc906.github.io/quartz/note/SolidJS-Router-Dynamic-Routes/</link><pubDate>Mon, 10 Oct 2022 00:32:00 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Router-Dynamic-Routes/</guid><description>https://github.com/solidjs/solid-router#dynamic-routes
1 2 3 &amp;lt;Routes&amp;gt; &amp;lt;Route path=&amp;#34;/users&amp;#34; component={Users} /&amp;gt; &amp;lt;Route path=&amp;#34;/users/:id&amp;#34; component={User} /&amp;gt; //&amp;lt;-- 위의 경우처럼 경로에 매개 변수를 취급하여 컴포넌트에 전달할 수 있습니다.</description></item><item><title>SolidJS - Router - Create Links to Your Routes</title><link>https://906bc906.github.io/quartz/note/SolidJS-Router-Create-Links-to-Your-Routes/</link><pubDate>Mon, 10 Oct 2022 00:31:48 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Router-Create-Links-to-Your-Routes/</guid><description>https://github.com/solidjs/solid-router#create-links-to-your-routes
Link 컴포넌트를 이용하여 해당 경로로 이동하는 a 태그를 생성하세요.
[[SolidJS의 Router에서 a 태그와 Link 컴포넌트의 구분]]
react-router의 Link를 쓰지 마세요!</description></item><item><title>SolidJS - Router - Getting Started</title><link>https://906bc906.github.io/quartz/note/SolidJS-Router-Getting-Started/</link><pubDate>Mon, 10 Oct 2022 00:31:40 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Router-Getting-Started/</guid><description>Set Up the Router 1 &amp;gt; npm i @solidjs/router @solidjs/router 를 설치하고, 루트 컴포넌트를 라우터 컴포넌트로 래핑하십시오.</description></item><item><title>SolidJS - Getting Started</title><link>https://906bc906.github.io/quartz/note/SolidJS-Getting-Started/</link><pubDate>Mon, 10 Oct 2022 00:31:24 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Getting-Started/</guid><description>참고 주소 https://docs.solidjs.com/tutorials/getting-started-with-solid/installing-solid
템플릿 설치 1 2 3 4 npx degit solidjs/templates/ts my-app cd my-app npm install # or yarn or pnpm npm run dev # or yarn or pnpm 시작 Solid 구조</description></item><item><title>SolidJS - Reactivity - Transitions</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Transitions/</link><pubDate>Mon, 10 Oct 2022 00:31:11 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Transitions/</guid><description>https://www.solidjs.com/tutorial/async_transitions
Suspense를 사용하면 데이터가 로딩 중인 경우 fallback 컨텐츠를 표시할 수 있다. 이는 초기 로딩에는 훌륭하지만, 이어지는 네비게이션에서는 스켈레톤 상태로 폴백하는 것이 사용자 경험에 더 나쁜 경우가 있다.</description></item><item><title>SolidJS - Reactivity - Suspense List</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Suspense-List/</link><pubDate>Mon, 10 Oct 2022 00:31:01 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Suspense-List/</guid><description>https://www.solidjs.com/tutorial/async_suspense_list
https://www.solidjs.com/docs/latest/api#suspenselist-experimental
SuspenseList는 실험 단계의 기능으로 온전한 SSR을 지원하지 않는다.
조정하고 싶은 Suspense 컴포넌트가 여러 개 있을 경우, 이를 통제하는 접근 방식은 여러 가지가 있을 것이다.</description></item><item><title>SolidJS - Reactivity - Resources</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Resources/</link><pubDate>Mon, 10 Oct 2022 00:30:55 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Resources/</guid><description>https://www.solidjs.com/tutorial/async_resources
https://www.solidjs.com/docs/latest/api#createresource
Resource는 비동기 로딩을 처리하도록 특별히 설계된 특수 시그널이다. 그 목적은 Solid의 분산 실행 모델과 쉽게 상호 작용할 수 있도록 비동기 값을 래핑하는 것이다.</description></item><item><title>SolidJS - Reactivity - Lazy Components</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Lazy-Components/</link><pubDate>Mon, 10 Oct 2022 00:30:45 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Lazy-Components/</guid><description>https://www.solidjs.com/tutorial/async_lazy
이 내용은 code splitting에 대한 이해가 필요하다.
대부분의 번들러는 동적 임포트를 사용하는 경우 자동으로 코드 분할을 처리한다. Solid의 Lazy 메서드를 사용하면 지연된 로딩을 위해 컴포넌트의 동적 임포넌트를 래핑할 수 있다.</description></item><item><title>SolidJS - Reactivity - On</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-On/</link><pubDate>Mon, 10 Oct 2022 00:30:37 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-On/</guid><description>https://www.solidjs.com/tutorial/reactivity_on
https://www.solidjs.com/docs/latest/api#on
편의를 위해 Solid는 계산에 필요한 디펜던시를 명시적으로 설정할 수 있도록 on 헬퍼를 제공한다.
이는 주로 어떤 시그널이 추적되는지에 대한 명시적이고 간결한 방법으로 사용된다.</description></item><item><title>SolidJS - Reactivity - Untrack</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Untrack/</link><pubDate>Mon, 10 Oct 2022 00:30:26 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Untrack/</guid><description>https://www.solidjs.com/tutorial/reactivity_untrack
리액티브 컨텍스트 내에서도 시그널 읽기 작업을 추적하지 않는 것이 필요하다. Solid는 래핑 계산이 읽기 작업을 추적하지 못하도록 하기 위해 untrack이라는 헬퍼를 제공한다.</description></item><item><title>SolidJS - Reactivity - Batching Updates</title><link>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Batching-Updates/</link><pubDate>Mon, 10 Oct 2022 00:30:15 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Reactivity-Batching-Updates/</guid><description>https://www.solidjs.com/tutorial/reactivity_batch
Solid의 반응성은 동기식이다. 즉, 변경이 일어나면 다음 행에서 DOM이 업데이트된다는 뜻이다. Solid의 세분화된 렌더링은 리액티브 시스템에서 발생한 업데이트를 전파할 뿐이므로 대부분의 경우 이는 문제가 없다.</description></item><item><title>SolidJS - Stores - Without Context</title><link>https://906bc906.github.io/quartz/note/SolidJS-Stores-Without-Context/</link><pubDate>Mon, 10 Oct 2022 00:20:38 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Stores-Without-Context/</guid><description>https://www.solidjs.com/tutorial/stores_nocontext
컨텍스트 미사용
컨텍스트는 Store를 위한 훌륭한 도구다. 인젝션을 처리하고, 소우권을 리액티브 그래프에 연결하고, 자동으로 할당 해제를 관리하며, Solid의 세분화된 렌더링 덕분에 렌더링 오버헤드가 없다.</description></item><item><title>SolidJS - Stores - Immutable Stores</title><link>https://906bc906.github.io/quartz/note/SolidJS-Stores-Immutable-Stores/</link><pubDate>Mon, 10 Oct 2022 00:20:16 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Stores-Immutable-Stores/</guid><description>https://www.solidjs.com/tutorial/stores_immutable
저장소는 Solid의 Store 프록시를 사용해 Solid에서 가장 자주 생성된다. 때로는 Redux, Apollo, XState와 같은 변경 불가능한 라이브러리와 인터페이스하고 싶은 경우가 있으며, 이에 대해 세분화된 업데이트를 수행해야 한다.</description></item><item><title>SolidJS - Stores - Context</title><link>https://906bc906.github.io/quartz/note/SolidJS-Stores-Context/</link><pubDate>Mon, 10 Oct 2022 00:20:05 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Stores-Context/</guid><description>https://www.solidjs.com/tutorial/stores_context
Solid에서 데이터를 다루다 보면, props를 사용하지 않고 전역적으로 데이터를 관리할 필요가 있다. 이럴때 사용하는 것이 Context API다. Context 는 시그널과 스토어를 공유할 때 유용하며, 리액티브 시스템의 일부로 생성되고, 관리된다는 장점이 있다.</description></item><item><title>SolidJS - Stores - Mutation</title><link>https://906bc906.github.io/quartz/note/SolidJS-Stores-Mutation/</link><pubDate>Mon, 10 Oct 2022 00:19:58 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Stores-Mutation/</guid><description>https://www.solidjs.com/tutorial/stores_mutation
Solid는 상태를 업데이트할 때 얕은 불변 패턴을 사용할 것을 강력하게 권장한다. 읽기와 쓰기를 분리함으로써 컴포넌트 계층들을 통과할 때 프록시에 대한 변경 사항을 잃어버릴 위험 없이 시스템의 반응성을 더 잘 컨트롤할 수 있다.</description></item><item><title>SolidJS - Stores - Create Store</title><link>https://906bc906.github.io/quartz/note/SolidJS-Stores-Create-Store/</link><pubDate>Mon, 10 Oct 2022 00:19:52 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Stores-Create-Store/</guid><description>https://www.solidjs.com/tutorial/stores_createstore
저장소 생성
중첩된 반응성에 대한 Solid의 대답은 Store 다. Store는 프록시 객체1이며, 프록시 내부의 프로퍼티를 추적할 수 있으며 프록시 내부에 자동으로 래핑되는 다른 객체들을 포함한다.</description></item><item><title>SolidJS - Stores - Nested Reactivity</title><link>https://906bc906.github.io/quartz/note/SolidJS-Stores-Nested-Reactivity/</link><pubDate>Mon, 10 Oct 2022 00:19:38 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Stores-Nested-Reactivity/</guid><description>https://www.solidjs.com/tutorial/stores_nested_reactivity
중첩된 반응성
Solid에서 세분화된 반응성을 제공할 수 있는 이유 중 하나는 중첩된 업데이트를 독립적으로 처리할 수 있기 때문이다. 사용자 리스트가 있고, 이 중의 한 사용자 이름을 업데이트한다고 했을 때, Solid는 리스트 자체의 내용을 비교하지 않으면서 DOM 에 있는 이름의 위치만 업데이트한다.</description></item><item><title>SolidJS - Props - Children</title><link>https://906bc906.github.io/quartz/note/SolidJS-Props-Children/</link><pubDate>Mon, 10 Oct 2022 00:19:30 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Props-Children/</guid><description>https://www.solidjs.com/tutorial/props_children
children 헬퍼에 대한 내용은 튜토리얼이 매우 빈약하기 때문에 영문 api 문서를 참고하십시오. (한국어 api 문서는 업데이트 되지 않았음)</description></item><item><title>SolidJS - Props - Splitting Props</title><link>https://906bc906.github.io/quartz/note/SolidJS-Props-Splitting-Props/</link><pubDate>Mon, 10 Oct 2022 00:19:23 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Props-Splitting-Props/</guid><description>https://www.solidjs.com/tutorial/props_split
props를 그룹으로 나누어 현재 컴포넌트에서 일부 사용하고, 나머지는 자식 컴포넌트로 전달하고 싶은 경우가 있다.
1 2 3 4 export default function Greeting(props) { const { greeting, name, .</description></item><item><title>SolidJS - Props - Default Props</title><link>https://906bc906.github.io/quartz/note/SolidJS-Props-Default-Props/</link><pubDate>Mon, 10 Oct 2022 00:19:16 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Props-Default-Props/</guid><description>https://www.solidjs.com/tutorial/props_defaults
Props는 JSX에 바인딩된 모든 속성을 나타내는, 실행시 컴포넌트 함수에 전달되는 객체다. Props 객체는 읽기 전용이며, Object getter로 래핑된 리액티브 프로퍼티를 갖는다.</description></item><item><title>SolidJS - Bindings - Directives</title><link>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Directives/</link><pubDate>Mon, 10 Oct 2022 00:19:04 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Directives/</guid><description>https://www.solidjs.com/tutorial/bindings_directives
Solid는 use: 네임스페이스를 사용해 커스텀 디렉티브를 지원한다.
1 &amp;lt;Component use:customFunc={() =&amp;gt; doSomething(...)} /&amp;gt; custonFunc 는 아래의 형식을 갖는다.</description></item><item><title>SolidJS - Bindings - Spreads</title><link>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Spreads/</link><pubDate>Mon, 10 Oct 2022 00:18:56 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Spreads/</guid><description>https://www.solidjs.com/tutorial/bindings_spreads
때로는 컴포넌트와 엘리먼트에서 다수의 속성을 받아서 아래쪽으로 전달할 때, 하나씩 전달하기보다 객체로 전달하는 것이 합리적이다. 디자인 시스템을 만들 때 일반적인 관행인 컴포넌트 안에서 DOM 엘리먼트를 래핑할 때 특히 그렇다.</description></item><item><title>SolidJS - Bindings - Forwarding Refs</title><link>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Forwarding-Refs/</link><pubDate>Mon, 10 Oct 2022 00:18:45 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Forwarding-Refs/</guid><description>https://www.solidjs.com/tutorial/bindings_forward_refs
Ref 전달
컴포넌트 내부의 ref를 부모에게 노출하고 싶은 경우가 많이 있는데, props.ref 를 활용하여 ref를 부모에게 전달할 수 있다.</description></item><item><title>SolidJS - Bindings - Refs</title><link>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Refs/</link><pubDate>Mon, 10 Oct 2022 00:18:37 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Refs/</guid><description>https://www.solidjs.com/tutorial/bindings_refs
2022년 10월 5일 기준, 위 주소의 애니메이션 테스트를 하기 위해서는 css 파일의 로고 주소를 편집해야 합니다.
JSX는 실제 DOM 엘리먼트를 생성하기 때문에, Solid에서는 항상 할당을 통해 DOM에 대한 레퍼런스를 얻을 수 있다.</description></item><item><title>SolidJS - Bindings - ClassList</title><link>https://906bc906.github.io/quartz/note/SolidJS-Bindings-ClassList/</link><pubDate>Mon, 10 Oct 2022 00:18:30 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Bindings-ClassList/</guid><description>https://www.solidjs.com/tutorial/bindings_classlist
Solid는 class를 사용해 엘리먼트의 className 프로퍼티를 설정할 수 있다. 하지만 조건문을 사용해 class를 설정하는 것이 편한 경우가 많은데, 이럴 때 Solid는 키가 class 이름이고 값이 boolean 표현식인 객체를 받는 빌트인 classList JSX 속성을 제공한다.</description></item><item><title>SolidJS - Bindings - Style</title><link>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Style/</link><pubDate>Mon, 10 Oct 2022 00:18:15 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Style/</guid><description>https://www.solidjs.com/tutorial/bindings_style
Solid의 style 속성은 스타일 문자열이나 객체를 받는다.
1 &amp;lt;div style={`color: green; background-color: ${state.color}; height: ${state.height}px`} /&amp;gt; 문자열로 위와 같이 지정할 수 있다.</description></item><item><title>SolidJS - Bindings - Events</title><link>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Events/</link><pubDate>Mon, 10 Oct 2022 00:18:04 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Bindings-Events/</guid><description>https://www.solidjs.com/tutorial/bindings_events
Solid의 이벤트는 on 접두사가 붙은 속성이다.
모든 on 바인딩은 대소문자를 구분하지 않기 때문에 이벤트 이름은 소문자여야 한다. 예를 들어, onMouseMove는 mousemove를 모니터링한다.</description></item><item><title>SolidJS - Lifecycles - onCleanup</title><link>https://906bc906.github.io/quartz/note/SolidJS-Lifecycles-onCleanup/</link><pubDate>Mon, 10 Oct 2022 00:17:48 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Lifecycles-onCleanup/</guid><description>https://www.solidjs.com/tutorial/lifecycles_oncleanup
onCleanup 함수는 이펙트, 컴포넌트, 커스텀 디렉티브 뿐만 아니라 리액티브 시스템의 동기 실행이 일어나는 거의 모든 곳에서 사용할 수 있다.</description></item><item><title>SolidJS - Lifecycles - onMount</title><link>https://906bc906.github.io/quartz/note/SolidJS-Lifecycles-onMount/</link><pubDate>Mon, 10 Oct 2022 00:17:40 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Lifecycles-onMount/</guid><description>https://www.solidjs.com/tutorial/lifecycles_onmount
onMount는 초기 렌더링이 완료되면 컴포넌트 당 한 번만 실행된다.
라이프사이클은 브라우저에서만 실행되므로, onMount에 있는 코드는 SSR 동산 서버에서 실행되지 않는다.</description></item><item><title>SolidJS - Control Flow - Error Boundary</title><link>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Error-Boundary/</link><pubDate>Mon, 10 Oct 2022 00:17:31 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Error-Boundary/</guid><description>https://www.solidjs.com/tutorial/flow_error_boundary
UI에서 발생하는 자바스크립트 오류로 전체 앱이 중단되면 안 된다. ErrorBoundary 컴포넌트는 자식 컴포넌트 트리에서 발생하는 자바스크립트 에러를 캐치해서, 에러를 기록하고, 충돌이 발생한 컴포넌트 트리 대신 fallback UI를 표시한다.</description></item><item><title>SolidJS - Control Flow - Portal</title><link>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Portal/</link><pubDate>Mon, 10 Oct 2022 00:17:16 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Portal/</guid><description>https://www.solidjs.com/tutorial/flow_portal
때로는 앱의 정상적인 플로우 외부에 엘리먼트를 삽입하는 것이 더 좋은 경우가 있다. Z-index 를 이용할 수도 있지만 때때로 모달과 같은 플로팅 엘리먼트에 대한 렌더링 컨텍스트를 처리하기에 부족한 경우가 있다.</description></item><item><title>SolidJS - Control Flow - Dynamic</title><link>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Dynamic/</link><pubDate>Mon, 10 Oct 2022 00:16:34 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Dynamic/</guid><description>https://www.solidjs.com/tutorial/flow_dynamic
많은 엘리먼트 들 중에서, 값에 따라 하나의 엘리먼트를 선택해서 보여줘야 하는 경우, Show 컴포넌트나 Switch/Match 컴포넌트를 이용하는 것은 코드를 굉장히 길어지게 한다.</description></item><item><title>SolidJS - Control Flow - Switch</title><link>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Switch/</link><pubDate>Mon, 10 Oct 2022 00:16:26 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Switch/</guid><description>https://www.solidjs.com/tutorial/flow_switch
때로는 2개 이상의 상호 배타적 결과가 있는 조건문을 처리해야 한다. 이런 경우를 위해 switch/case를 본떠 만든 Switch, Match 컴포넌트가 있다.</description></item><item><title>SolidJS - Control Flow - Index</title><link>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Index/</link><pubDate>Mon, 10 Oct 2022 00:16:16 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Index/</guid><description>https://www.solidjs.com/tutorial/flow_index
Index 컴포넌트는 For 컴포넌트와 유사하게 객체 배열에 대한 반복을 위해 사용된다.
단, Index 컴포넌트가 For 컴포넌트와 다른 점은 아래와 같다.</description></item><item><title>SolidJS - Control Flow - For</title><link>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-For/</link><pubDate>Mon, 10 Oct 2022 00:16:06 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-For/</guid><description>https://www.solidjs.com/tutorial/flow_for
For 컴포넌트를 사용해 객체 배열에 대해 반복을 편하게 할 수 있다.
1 2 3 4 5 6 7 &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;a target=&amp;#34;_blank&amp;#34; href=&amp;#34;&amp;#34;&amp;gt; 1: Garfield &amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 위 코드에서 li 컴포넌트를 cats() 로 전개하고 싶다면,</description></item><item><title>SolidJS - Control Flow - Show</title><link>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Show/</link><pubDate>Mon, 10 Oct 2022 00:15:54 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Control-Flow-Show/</guid><description>https://www.solidjs.com/tutorial/flow_show
가장 기본적인 제어 흐름은 조건문이다. Solid 에서는 다음의 세 가지 방법으로 조건문을 사용할 수 있다.
삼항 연산자(a ?</description></item><item><title>SolidJS - Introduction - Memos</title><link>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Memos/</link><pubDate>Mon, 10 Oct 2022 00:09:50 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Memos/</guid><description>https://www.solidjs.com/tutorial/introduction_memos
때로는 중복 작업을 줄이기 위해 값을 캐시할 필요가 있다. 이때 메모(Memo)를 사용하여 함수 실행 결과를 디펜던시가 변경될 때까지 캐시할 수 있다.</description></item><item><title>SolidJS - Introduction - Derived Signals</title><link>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Derived-Signals/</link><pubDate>Mon, 10 Oct 2022 00:09:36 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Derived-Signals/</guid><description>https://www.solidjs.com/tutorial/introduction_derived
Derived signals : 파생된 시그널
시그널을 함수로 래핑하여 시그널에 의존하는 새로운 표현식을 생성할 수 있다. 시그널에 액세스하는 함수도 시그널이기 때문에, 래핑된 시그널이 변경되면 시그널에 의존하는 다른 시그널도 업데이트한다.</description></item><item><title>SolidJS - Introduction - Effects</title><link>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Effects/</link><pubDate>Mon, 10 Oct 2022 00:09:20 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Effects/</guid><description>https://www.solidjs.com/tutorial/introduction_effects
시그널을 보완하기 위해, 추적 가능한 값으로 업데이트 할 수 있는 옵저버가 있다. 이펙트는 옵저버 중 하나로, 시그널에 의존하는 사이드 이펙트를 실행한다.</description></item><item><title>SolidJS - Introduction - Signals</title><link>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Signals/</link><pubDate>Mon, 10 Oct 2022 00:08:22 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Signals/</guid><description>https://www.solidjs.com/tutorial/introduction_signals
Signal은 변경되는 값을 포함한다. 시그널의 값을 변경하면, 해당 시그널을 사용하는 모든 것들이 자동으로 업데이트 된다. 즉, 시그널 값의 변경이 시그널을 구독한 요소들에 전파되므로 반응성의 토대가 된다고 말할 수 있다.</description></item><item><title>SolidJS - Introduction - Components</title><link>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Components/</link><pubDate>Mon, 10 Oct 2022 00:07:39 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Introduction-Components/</guid><description>https://www.solidjs.com/tutorial/introduction_components
코드를 컴포넌트 단위로 분리하면 모듈화와 재사용성을 챙길 수 있다.
컴포넌트는 HelloWrold와 같은 함수이나, JSX를 반환하고, 다른 컴포넌트의 JSX에 의해 호출될 수 있다.</description></item><item><title>SolidJS - Introduction - JSX</title><link>https://906bc906.github.io/quartz/note/SolidJS-Introduction-JSX/</link><pubDate>Mon, 10 Oct 2022 00:07:28 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-Introduction-JSX/</guid><description>https://www.solidjs.com/tutorial/introduction_jsx
Solid는 JSX 를 사용한다. 다른 프레임워크와는 달리 가능한 한 HTML 표준에 가깝게 유지하려고 노력한다.
하지만 JSX 가 HTML의 상위집합이 될 수는 없는데, 그 이유는 다음과 같다</description></item><item><title>웹 개발</title><link>https://906bc906.github.io/quartz/note/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/</link><pubDate>Sun, 09 Oct 2022 23:53:24 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%EC%9B%B9-%EA%B0%9C%EB%B0%9C/</guid><description>Basic HTML CSS Javascript Frontend SolidJS Vite Backend Express EdgeDB Etc oauth passport로 github oauth 회원가입 및 로그인 구현</description></item><item><title/><link>https://906bc906.github.io/quartz/README/</link><pubDate>Sun, 09 Oct 2022 22:52:42 +0900</pubDate><guid>https://906bc906.github.io/quartz/README/</guid><description>이 리포지토리는 Obsidian으로 작성되었습니다.
가능한 표준 마크다운 신택스를 따르나, dataview 등 일부 Obsidian 관련 신택스들은 Obsidian을 제외한 마크다운 에디터/뷰어에서는 정상적으로 동작하지 않습니다.</description></item><item><title>to do</title><link>https://906bc906.github.io/quartz/note/to-do/</link><pubDate>Sun, 09 Oct 2022 22:16:20 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/to-do/</guid><description>1 2 3 4 TABLE WITHOUT ID file.link AS title, tags FROM -&amp;#34;templates&amp;#34; SORT file.mtime, tags desc WHERE contains(tags, &amp;#34;todo&amp;#34;)</description></item><item><title>소프트웨어 개발 Software development</title><link>https://906bc906.github.io/quartz/note/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-Software-development/</link><pubDate>Sun, 09 Oct 2022 06:35:52 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B0%9C%EB%B0%9C-Software-development/</guid><description>개발자 프로그래밍 컴퓨터 과학 IO blocking non-blocking sync async 구분 알고리즘 환경 블로그 obsidian 옵시디언 취업 준비</description></item><item><title>SolidJS</title><link>https://906bc906.github.io/quartz/note/SolidJS/</link><pubDate>Fri, 07 Oct 2022 08:26:19 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS/</guid><description>솔리드는 반응형 웹 앱을 만들기 위한 JS 프레임워크다.
SolidJS - 튜토리얼 SolidJS - Getting Started SolidJS - Router 시작 1 2 3 4 npx degit solidjs/templates/ts my-app cd my-app npm install # or yarn or pnpm npm run dev # or yarn or pnpm 템플릿을 이용하여 개발 시작한다.</description></item><item><title>SolidJS - 튜토리얼</title><link>https://906bc906.github.io/quartz/note/SolidJS-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/</link><pubDate>Fri, 07 Oct 2022 08:11:07 +0900</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/</guid><description>색인 SolidJS 를 다루기 위해 알아야 될 요소는 아래와 같습니다.
Introduction SolidJS - Introduction - Basics SolidJS - Introduction - JSX SolidJS - Introduction - Components SolidJS - Introduction - Signals SolidJS - Introduction - Effects SolidJS - Introduction - Derived Signals SolidJS - Introduction - Memos Control Flow SolidJS - Control Flow - Show SolidJS - Control Flow - For SolidJS - Control Flow - Index SolidJS - Control Flow - Switch SolidJS - Control Flow - Dynamic SolidJS - Control Flow - Portal SolidJS - Control Flow - Error Boundary Lifecycles SolidJS - Lifecycles - onMount SolidJS - Lifecycles - onCleanup Bindings SolidJS - Bindings - Events SolidJS - Bindings - Style SolidJS - Bindings - ClassList SolidJS - Bindings - Refs SolidJS - Bindings - Forwarding Refs SolidJS - Bindings - Spreads SolidJS - Bindings - Directives Props SolidJS - Props - Default Props SolidJS - Props - Splitting Props SolidJS - Props - Children Stores SolidJS - Stores - Nested Reactivity SolidJS - Stores - Create Store SolidJS - Stores - Mutation SolidJS - Stores - Context SolidJS - Stores - Immutable Stores SolidJS - Stores - Without Context Reactivity SolidJS - Reactivity - Batching Updates SolidJS - Reactivity - Untrack SolidJS - Reactivity - On Async SolidJS - Reactivity - Lazy Components SolidJS - Reactivity - Resources SolidJS - Reactivity - Suspense SolidJS - Reactivity - Suspense List SolidJS - Reactivity - Transitions 위의 요소들은 Tutorial 에서 확인할 수 있습니다.</description></item><item><title/><link>https://906bc906.github.io/quartz/note/SolidJS%EC%9D%98-Router%EC%97%90%EC%84%9C-a-%ED%83%9C%EA%B7%B8%EC%99%80-Link-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EA%B5%AC%EB%B6%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://906bc906.github.io/quartz/note/SolidJS%EC%9D%98-Router%EC%97%90%EC%84%9C-a-%ED%83%9C%EA%B7%B8%EC%99%80-Link-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EA%B5%AC%EB%B6%84/</guid><description>SolidJS의 Router 문서를 보면 Link, NavLink 컴포넌트를 이용하라고 적혀있고, a 태그에 대한 내용은 없다.
Solid-router 의 컴포넌트 소스를 보면,
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 export function Link(props: LinkProps) { const to = useResolvedPath(() =&amp;gt; props.</description></item><item><title>blocking non-blocking sync async 구분</title><link>https://906bc906.github.io/quartz/note/IO-blocking-non-blocking-sync-async-%EA%B5%AC%EB%B6%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://906bc906.github.io/quartz/note/IO-blocking-non-blocking-sync-async-%EA%B5%AC%EB%B6%84/</guid><description>blocking, non-blocking 은 {1:호출되는 함수가 바로 리턴하느냐 마느냐} 가 기준이며, sync, async는 {2:호출되는 함수의 작업 완료 여부를 누가 신경쓰느냐} 가 관심사다.</description></item></channel></rss>